import matplotlib.pyplot as plt
import numpy as np
import time

from methods import bisection_method, chord_method


def f(x):
    return x * (pow(np.e, 4 * np.sin(x)) - 1) - 2 * (np.tanh(x) + 8)


def find_roots(a, b, epsilon, method):
    """
    –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –∫–æ—Ä–Ω–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏—è f(x) = 0 –Ω–∞ –æ—Ç—Ä–µ–∑–∫–µ [a, b].

    Args:
        a (float): –õ–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –æ—Ç—Ä–µ–∑–∫–∞.
        b (float): –ü—Ä–∞–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –æ—Ç—Ä–µ–∑–∫–∞.
        epsilon (float): –¢–æ—á–Ω–æ—Å—Ç—å (—Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Ç–µ–∫—É—â–∏–º –∏ —Ç–æ—á–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –∫–æ—Ä–Ω—è).
        method: –º–µ—Ç–æ–¥ –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –∫–æ—Ä–Ω–µ–π

    Returns:
        list: –°–ø–∏—Å–æ–∫ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∫–æ—Ä–Ω–µ–π.
    """
    roots = []
    while a < b:
        if f(a) * f(a + epsilon) < 0:
            root = method(a, a + epsilon, epsilon, f)
            roots.append(root)
        a += epsilon
    return roots


start_time = time.time()
# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
left = 0  # –õ–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –æ—Ç—Ä–µ–∑–∫–∞
right = 8.0  # –ü—Ä–∞–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –æ—Ç—Ä–µ–∑–∫–∞
e = 1e-6  # –¢–æ—á–Ω–æ—Å—Ç—å

all_roots = find_roots(left, right, e, chord_method)
print(f"–ü—Ä–∏–±–ª–∏–∂–µ–Ω–Ω—ã–µ –∫–æ—Ä–Ω–∏ –Ω–∞ –æ—Ç—Ä–µ–∑–∫–µ [{left}, {right}]: {all_roots}")

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–π x
x = np.linspace(left - 1, right + 1, 100)

# –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π —Ñ—É–Ω–∫—Ü–∏–∏ y = f(x)
y = f(x)

# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
plt.plot(x, y, label="f(x) = ùë•(ùëí^4sin(ùë•) ‚àí1)‚àí2(tanh(ùë•)+8)")
plt.xlabel("x")
plt.ylabel("f(x)")
plt.title("–ì—Ä–∞—Ñ–∏–∫ —Ñ—É–Ω–∫—Ü–∏–∏ f(x)")
plt.grid(True)
plt.legend()

end_time = time.time()
print(f'–≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {end_time - start_time}')

plt.show()
# –ü—Ä–∏–±–ª–∏–∂–µ–Ω–Ω—ã–µ –∫–æ—Ä–Ω–∏ –Ω–∞ –æ—Ç—Ä–µ–∑–∫–µ [0, 8.0]: [0.866513143300948, 2.5978299242235683, 6.617821974427504]